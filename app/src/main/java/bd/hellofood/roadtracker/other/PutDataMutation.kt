// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package bd.hellofood.roadtracker.other

import com.apollographql.apollo.api.Input
import com.apollographql.apollo.api.Mutation
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.InputFieldMarshaller
import com.apollographql.apollo.api.internal.InputFieldWriter
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.Transient
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class PutDataMutation(
  val user: Input<String> = Input.absent(),
  val avgSpeedInKMH: Input<Double> = Input.absent(),
  val distanceInMeters: Input<Double> = Input.absent(),
  val points: Input<List<Double?>> = Input.absent(),
  val timeInMillis: Input<Int> = Input.absent(),
  val timestamp: Input<Int> = Input.absent()
) : Mutation<PutDataMutation.Data, PutDataMutation.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      if (this@PutDataMutation.user.defined) {
        this["user"] = this@PutDataMutation.user.value
      }
      if (this@PutDataMutation.avgSpeedInKMH.defined) {
        this["avgSpeedInKMH"] = this@PutDataMutation.avgSpeedInKMH.value
      }
      if (this@PutDataMutation.distanceInMeters.defined) {
        this["distanceInMeters"] = this@PutDataMutation.distanceInMeters.value
      }
      if (this@PutDataMutation.points.defined) {
        this["points"] = this@PutDataMutation.points.value
      }
      if (this@PutDataMutation.timeInMillis.defined) {
        this["timeInMillis"] = this@PutDataMutation.timeInMillis.value
      }
      if (this@PutDataMutation.timestamp.defined) {
        this["timestamp"] = this@PutDataMutation.timestamp.value
      }
    }

    override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.invoke { writer ->
      if (this@PutDataMutation.user.defined) {
        writer.writeString("user", this@PutDataMutation.user.value)
      }
      if (this@PutDataMutation.avgSpeedInKMH.defined) {
        writer.writeDouble("avgSpeedInKMH", this@PutDataMutation.avgSpeedInKMH.value)
      }
      if (this@PutDataMutation.distanceInMeters.defined) {
        writer.writeDouble("distanceInMeters", this@PutDataMutation.distanceInMeters.value)
      }
      if (this@PutDataMutation.points.defined) {
        writer.writeList("points", this@PutDataMutation.points.value?.let { value ->
          InputFieldWriter.ListWriter { listItemWriter ->
            value.forEach { value ->
              listItemWriter.writeDouble(value)
            }
          }
        })
      }
      if (this@PutDataMutation.timeInMillis.defined) {
        writer.writeInt("timeInMillis", this@PutDataMutation.timeInMillis.value)
      }
      if (this@PutDataMutation.timestamp.defined) {
        writer.writeInt("timestamp", this@PutDataMutation.timestamp.value)
      }
    }
  }

  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = variables
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  data class CreateTrack(
    val __typename: String = "CreateResponse",
    val created: Boolean
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@CreateTrack.__typename)
      writer.writeBoolean(RESPONSE_FIELDS[1], this@CreateTrack.created)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forBoolean("created", "created", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): CreateTrack = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val created = readBoolean(RESPONSE_FIELDS[1])!!
        CreateTrack(
          __typename = __typename,
          created = created
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<CreateTrack> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    val createTrack: CreateTrack?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.createTrack?.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("createTrack", "createTrack", mapOf<String, Any?>(
            "user" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "user"),
            "avgSpeedInKMH" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "avgSpeedInKMH"),
            "distanceInMeters" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "distanceInMeters"),
            "points" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "points"),
            "timeInMillis" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "timeInMillis"),
            "timestamp" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "timestamp")), true, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val createTrack = readObject<CreateTrack>(RESPONSE_FIELDS[0]) { reader ->
          CreateTrack(reader)
        }
        Data(
          createTrack = createTrack
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "9eeb49a83fe9b56c8d64ce2af5d813df77f74b555d771fea6eabea44a6224dda"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |mutation PutData(${'$'}user: String, ${'$'}avgSpeedInKMH: Float, ${'$'}distanceInMeters: Float, ${'$'}points: [Float], ${'$'}timeInMillis: Int, ${'$'}timestamp: Int) {
          |  createTrack(user: ${'$'}user, avgSpeedInKMH: ${'$'}avgSpeedInKMH, distanceInMeters: ${'$'}distanceInMeters, points: ${'$'}points, timeInMillis: ${'$'}timeInMillis, timestamp: ${'$'}timestamp) {
          |    __typename
          |    created
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "PutData"
    }
  }
}
